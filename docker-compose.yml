networks:
    app-network:
        driver: bridge

services:
    app:
        build:
            context: . #Path to source code
            dockerfile: ./.docker/php/Dockerfile
            target: development
        container_name: laravel-app
        restart: unless-stopped #Restart policy
        working_dir: /var/www/html
        volumes:
            - type: bind
              source: . #Path to project
              target: /var/www/html
            - .docker/php/php.development.ini:/usr/local/etc/php/php.ini:ro
            - ./.env:/var/www/html/.env:ro
        # ports:
        # - "80:8000"
        # command: php artisan serve --host=0.0.0.0 --port=8000
        depends_on:
            - mysql
        networks:
            - app-network

    nginx:
        build:
            context: . # Path to source code
            dockerfile: ./.docker/nginx/Dockerfile
        container_name: laravel-nginx
        restart: unless-stopped
        ports:
            - "80:80" # Map host port 80 to container port 80
            - "443:443" # Map host port 443 to container port 443
        volumes:
            - type: bind
              source: . # Path to project
              target: /var/www/html
            - ./.docker/nginx/default.conf:/etc/nginx/http.d/default.conf:ro
            - ./.docker/nginx/certs:/etc/nginx/certs:ro
        networks:
            - app-network
        depends_on:
            - app

    mysql:
        build:
            context: . # Path to source code
            dockerfile: ./.docker/mysql/Dockerfile
        container_name: laravel-db
        restart: unless-stopped
        ports:
            - "3306:3306"
        environment:
            MARIADB_ROOT_PASSWORD: adpassword
            MARIADB_DATABASE: laravel
            MARIADB_USER: admin
            MARIADB_PASSWORD: adpassword
        volumes:
            - db_data:/var/lib/mysql # Volume for MySQL
            - .docker/mysql/custom.cnf:/etc/mysql/conf.d/my.cnf:ro # Mount file custom.cnf
        networks:
            - app-network

volumes:
    db_data:
#Vì sao chúng ta lại sử dụng lệnh COPY trong Dockerfile nhưng trong docker-compose.yml lại sử dụng volumes?
#Khi sử dụng COPY trong Dockerfile, mỗi lần thay đổi cấu hình, chúng ta phải rebuild lại image. Điều này không phải lúc nào cũng tiện lợi.
#Vì vậy, chúng ta sử dụng volumes trong docker-compose.yml để mount thư mục code vào container. Khi thay đổi code, chúng ta không cần phải rebuild lại image, chỉ cần restart lại container.

#Restart policy
#Chúng ta có thể sử dụng restart policy để xác định cách container sẽ khởi động lại khi container bị dừng. Có 4 giá trị mà chúng ta có thể sử dụng:
#no: Không khởi động lại container khi container bị dừng.
#always: Container sẽ luôn khởi động lại khi container bị dừng.
#on-failure: Container sẽ khởi động lại khi container bị dừng với exit code khác 0.
#unless-stopped: Container sẽ khởi động lại khi container bị dừng, trừ khi chúng ta dừng container bằng lệnh docker stop.

#volume:
#Chúng ta sử dụng volumes để lưu trữ dữ liệu của MySQL. Khi container MySQL bị dừng, dữ liệu vẫn được lưu trữ trong volume db_data. Khi container MySQL khởi động lại, dữ liệu vẫn được giữ nguyên.
